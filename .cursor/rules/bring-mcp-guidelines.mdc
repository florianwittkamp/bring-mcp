---
description: 
globs: 
alwaysApply: true
---
# Bring! MCP Server Project Guidelines

This document outlines key conventions, structures, and important points for working with the `bring-mcp` TypeScript project.

## Project Overview

- **Purpose**: Implements a Model Context Protocol (MCP) server that exposes the Bring! shopping list API.
- **Language**: TypeScript
- **Key Libraries**:
    - `@modelcontextprotocol/sdk`: For MCP server implementation.
    - `bring-shopping`: Node.js wrapper for the Bring! API.
    - `zod`: For schema definition and validation.
    - `dotenv`: For managing environment variables.
    - `jest`: For testing.
    - `eslint` & `prettier`: For linting and formatting.

## Directory Structure

- **`.cursor/rules/`**: Contains Cursor AI project-specific rules like this one.
- **`src/`**: Main application source code.
    - **`index.ts`**: Entry point, MCP server setup, `registerTool` helper function, and the `main` function which initializes `BringClient` and registers tools.
    - **`bringClient.ts`**: A wrapper class around the `bring-shopping` library, centralizing all interactions with the Bring! API.
    - **`schemaShared.ts`**: Defines common Zod schema parts (e.g., `listUuidParam`, `itemIdParam`) for reuse across tool schemas.
    - **`tools/`**: Contains modularized tool registration functions.
        - `listTools.ts`
        - `itemTools.ts`
        - `userTools.ts`
        - `catalogTools.ts`
- **`tests/`**: Contains Jest test files (e.g., `*.spec.ts`).
- **`.env`**: Used for storing Bring! API credentials (`MAIL`, `PW`). This file should not be committed to version control.
- **`assets/`**: Contains static assets like images for the README.
- **`eslint.config.js`**: ESLint configuration.
- **`jest.config.js`**: Jest test runner configuration.
- **`tsconfig.json`**: TypeScript compiler configuration.
- **`package.json`**: Project metadata, dependencies, and npm scripts.
- **`aufgabe.md`**: Original code review/task description (German).
- **`reihenfolge.md`**: Step-by-step plan followed for refactoring (German).

## Tool Registration (`src/index.ts`)

- A helper function `registerTool` is defined in `src/index.ts` to standardize tool registration.
- **Overloads**: `registerTool` has overloads to support tools with Zod schemas and tools without arguments (schema is `undefined`).
- **Parameters**:
    - `server`: The `McpServer` instance.
    - `bc`: The `BringClient` instance.
    - `name`: Tool name (string).
    - `description`: Tool description (string).
    - `schemaShape`: (Optional) A Zod raw shape (`z.object({...}).shape`) defining the tool's input parameters.
    - `actionFn`: An async function `(args, bc) => Promise<result>` that implements the tool's core logic. `args` are the parsed Zod parameters or `undefined`.
    - `transformResult`: (Optional) A function `(result) => ({ content: McpContentPart[] })` to format the `actionFn`'s result into the MCP tool response structure. If not provided, the result is stringified as JSON.
    - `failureMessage`: A string prepended to error messages if `actionFn` throws an error.
- Tool definitions are modularized into functions within the `src/tools/` directory (e.g., `registerItemTools(server, bc)`).

## BringClient (`src/bringClient.ts`)

- This class encapsulates all interactions with the `bring-shopping` library.
- **API Method Signatures**:
    - `saveItemImage(listUuid: string, itemId: string, imagePathOrUrl: string)`: The `imagePathOrUrl` is passed directly to the library.
    - `removeItemImage(listUuid: string, itemId: string)`
    - **Note**: For `saveItemImage` and `removeItemImage`, `@ts-expect-error` comments are used. This is because the `bring-shopping` library's TypeScript definitions might be outdated. The current signatures are based on analysis of the library's changelog and relevant pull requests.
- **Error Handling**: The `login()` method in `BringClient` throws specific, user-friendly error messages for invalid credentials or connection issues. These messages are propagated by the `registerTool` helper.

## Environment Variables & Initialization

- **Credentials**: `MAIL` and `PW` for Bring! authentication are required.
- **`.env` file**: The primary way to provide credentials for local development.
- **Initialization Order**: In `src/index.ts`, the `main()` function first checks for the presence of `MAIL` and `PW` environment variables. If they are missing, the application exits. `BringClient` instantiation and all tool registrations occur *after* this check.

## Linting, Formatting, and Testing

- **ESLint & Prettier**: Configured for code quality and consistency.
    - Run formatting: `npm run format`
    - Run linting: `eslint . --ext .ts` (part of `npm run test`)
- **Ignoring Files**: The `build/` output directory is ignored by ESLint (configured in `eslint.config.js`).
- **Testing**: Jest is used for running tests.
    - Test files are located in `tests/` and typically use the `*.spec.ts` naming convention.
    - Run all tests (including formatting and linting): `npm run test`

## General Coding Conventions & Best Practices

- **Modularity**: Group related tools into their own files within `src/tools/`.
- **Schema Reusability**: Utilize common Zod schema definitions from `src/schemaShared.ts` for parameters like `listUuid` and `itemId`.
- **Type Safety**: Use TypeScript effectively. Employ `any` sparingly and only when necessary (e.g., in the implementation signature of overloaded functions where overloads provide strict typing, or when dealing with external library type issues using `@ts-expect-error` with justification).
- **Clarity**: Ensure comments explain non-obvious logic, especially regarding external library interactions or workarounds (like `@ts-expect-error`).
- **Robustness**: Check for necessary preconditions, such as environment variables, before initializing dependent parts of the application.

By following these guidelines, the AI should be able to assist more effectively with code generation, refactoring, and understanding the project's structure and conventions.
